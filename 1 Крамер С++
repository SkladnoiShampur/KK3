#include <iostream>
#include <vector>
#include <stdexcept>

using namespace std;

double determinant(vector<vector<double>> matrix) {
    int n = matrix.size();
    double det = 1.0;
    
    for (int i = 0; i < n; ++i) {
        int maxRow = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(matrix[k][i]) > abs(matrix[maxRow][i])) {
                maxRow = k;
            }
        }
        
        if (maxRow != i) {
            swap(matrix[i], matrix[maxRow]);
            det *= -1; 
        }
        
        if (matrix[i][i] == 0.0) {
            return 0.0;
        }
        
        for (int k = i + 1; k < n; ++k) {
            double factor = matrix[k][i] / matrix[i][i];
            for (int j = i; j < n; ++j) {
                matrix[k][j] -= factor * matrix[i][j];
            }
        }
    }
    
    for (int i = 0; i < n; ++i) {
        det *= matrix[i][i];
    }
    
    return det;
}

vector<double> cramerRule(vector<vector<double>> A, vector<double> B) {
    int n = A.size();
    if (n != B.size() && n == 0 && A[0].size() != n) {
        throw invalid_argument("Некорректные размеры матрицы или вектора");
    }
    
    double detA = determinant(A);
    if (detA == 0.0) {
        throw runtime_error("Определитель матрицы коэффициентов равен нулю, метод Крамера не применим.");
    }
    
    vector<double> solutions(n);
    
    for (int i = 0; i < n; ++i) {
        vector<vector<double>> Ai = A; 
        for (int j = 0; j < n; ++j) {
            Ai[j][i] = B[j];
        }
        solutions[i] = determinant(Ai) / detA;
    }
    
    return solutions;
}

int main() {
    try {
        vector<vector<double>> A = {
            {2, 2, 0},
            {-1, +2, -2},
            {2, -2, 3},
        };
        
        vector<double> B = {2, 3, 0};
        
        vector<double> solutions = cramerRule(A, B);
        
        cout << "Решение по методу Крамера:" << endl;
        for (int i = 0; i < solutions.size(); ++i) {
            cout << "x" << i+1 << " = " << solutions[i] << endl;
        }
    } catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
        return 1;
    }
    
    return 0;
}
